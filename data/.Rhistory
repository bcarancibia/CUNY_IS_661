color.title = palette[9]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.background, color=color.background)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color=color.background)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_blank()) +
theme(axis.ticks=element_blank()) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.background)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
by_state<- group_by(socrata, Provider.State)
summary_by_state <- summarise(by_state, procedures.each.state = n(),
sum.average.charges = sum(Average.Covered.Charges))
order_summary_state <- summary_by_state[order(-summary_by_state$sum.average.charges),]
head(order_summary_state)
average <- ggplot(order_summary_state, aes(x=order_summary_state$Provider.State, y=order_summary_state$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per State" )
average
average <- ggplot(order_summary_state, aes(x=order_summary_state$Provider.State, y=order_summary_state$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per State" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average
View(socrata)
unique(DRG.Definition)
unique(socrata$DRG.Definition)
shiny::runApp('s_homework/shinyapp')
by_DRG <- group_by(socrata, DRG.Definition)
summary_drg <- summarise(by_DRG, total_DRG = n(), sum.average.charges = sum(Average.Covered.Charges))
order_summary_drg <- summary_dry[order(-summary_by_state$sum.average.charges)]
by_DRG <- group_by(socrata, DRG.Definition)
summary_drg <- summarise(by_DRG, total_DRG = n(), sum.average.charges = sum(Average.Covered.Charges))
order_summary_drg <- summary_drg[order(-summary_by_state$sum.average.charges)]
View(order_summary_drg)
order_summary_drg
by_state<- group_by(socrata, Provider.State)
summary_by_state <- summarise(by_state, procedures.each.state = n(),
sum.average.charges = sum(Average.Covered.Charges))
order_summary_state <- summary_by_state[order(-summary_by_state$sum.average.charges),]
head(order_summary_state)
by_DRG <- group_by(socrata, DRG.Definition)
summary_drg <- summarise(by_DRG, total_DRG = n(), sum.average.charges = sum(Average.Covered.Charges))
order_summary_drg <- summary_drg[order(-summary_drg$sum.average.charges)]
order_summary_drg
by_DRG <- group_by(socrata, DRG.Definition)
View(by_DRG)
View(by_state)
View(by_DRG)
View(summary_drg)
order_summary_drg <- summary_drg[order(-summary_drg$sum.average.charges)]
View(order_summary_drg)
socrata <- read.csv("/users/bcarancibia/s_homework/data/Inpatient_prospective_Payment.csv", headers=TRUE)
summary(socrata)
require(dplyr) #data manipulation
require(ggplot2) #plot the data
require(scales) # visualization
require(grid) # visualization
require(RColorBrewer) # visualization
fte_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[3]
color.axis.text = palette[6]
color.axis.title = palette[7]
color.title = palette[9]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.background, color=color.background)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color=color.background)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_blank()) +
theme(axis.ticks=element_blank()) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.background)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
by_state<- group_by(socrata, Provider.State)
summary_by_state <- summarise(by_state, procedures.each.state = n(),
sum.average.charges = sum(Average.Covered.Charges))
order_summary_state <- summary_by_state[order(-summary_by_state$sum.average.charges),]
head(order_summary_state)
by_DRG <- group_by(socrata, DRG.Definition)
summary_drg <- summarise(by_DRG, total_DRG = n(),
sum.average.charges= sum(Average.Covered.Charges))
order_summary_drg <- summary_drg[order(-summary_drg$sum.average.charges)]
average <- ggplot(order_summary_state, aes(x=order_summary_state$Provider.State, y=order_summary_state$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per State" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average
socrata <- read.csv("/users/bcarancibia/s_homework/data/Inpatient_prospective_Payment.csv")
summary(socrata)
require(dplyr) #data manipulation
require(ggplot2) #plot the data
require(scales) # visualization
require(grid) # visualization
require(RColorBrewer) # visualization
fte_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[3]
color.axis.text = palette[6]
color.axis.title = palette[7]
color.title = palette[9]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.background, color=color.background)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color=color.background)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_blank()) +
theme(axis.ticks=element_blank()) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.background)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
by_state<- group_by(socrata, Provider.State)
summary_by_state <- summarise(by_state, procedures.each.state = n(),
sum.average.charges = sum(Average.Covered.Charges))
order_summary_state <- summary_by_state[order(-summary_by_state$sum.average.charges),]
head(order_summary_state)
by_DRG <- group_by(socrata, DRG.Definition)
summary_drg <- summarise(by_DRG, total_DRG = n(),
sum.average.charges= sum(Average.Covered.Charges))
order_summary_drg <- summary_drg[order(-summary_drg$sum.average.charges)]
average <- ggplot(order_summary_state, aes(x=order_summary_state$Provider.State, y=order_summary_state$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per State" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average
by_drg<- group_by(socrata, DRG.Definition)
summary_by_drg <- summarise(by_drg, procedures = n(),
sum.average.charges = sum(Average.Covered.Charges))
order_summary_drg <- summary_by_drg[order(-summary_by_drg$sum.average.charges),]
View(order_summary_drg)
shiny::runApp('s_homework/shinyapp')
average_procedure <- ggplot(order_summary_drg, aes(x=order_summary_drg$DRG.Definition, y=order_summary_drg$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("Procedure") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per Procedure" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average_procedure
average <- ggplot(order_summary_state, aes(x=order_summary_state$Provider.State, y=order_summary_state$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per State" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average
average_procedure <- ggplot(order_summary_drg, aes(x=order_summary_drg$DRG.Definition, y=order_summary_drg$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("Procedure") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per Procedure" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average_procedure
order_summary_drg
shiny::runApp('s_homework/shinyapp')
socrata_subset <- subset(socrata, socrata$DRG.Definition=='291 - HEART FAILURE & SHOCK W MCC')
by_state_heart<- group_by(socrata_subset, Provider.State)
summary_by_state_heart <- summarise(by_state_heart, procedures.each.state = n(),
sum.average.charges = sum(Average.Covered.Charges))
order_summary_state_heart <- summary_by_state_heart[order(-summary_by_state_heart$sum.average.charges),]
head(order_summary_state_heart)
order_summary_state_heart
average_heart <- ggplot(order_summary_state_heart, aes(x=order_summary_state_heart$Provider.State, y=order_summary_state_heart$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges Related to Heart Procedures per State " )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average_heart
shiny::runApp('s_homework/shinyapp')
require(dplyr) #data manipulation
require(ggplot2) #plot the data
require(scales) # visualization
require(grid) # visualization
require(RColorBrewer) # visualization
fte_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[3]
color.axis.text = palette[6]
color.axis.title = palette[7]
color.title = palette[9]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.background, color=color.background)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color=color.background)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_blank()) +
theme(axis.ticks=element_blank()) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.background)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
chad_iati <- read.csv("/users/bcarancibia/DG_BCA/IATI/Chad/data/chad_iati_activity.csv", header = TRUE)
chad_iati_transactions <- read.csv("/users/bcarancibia/DG_BCA/IATI/Chad/data/chad_transaction.csv", header = TRUE)
canada_transactions <- subset(chad_iati_transactions, chad_iati_transactions$transaction_provider.org=='Canada')
by_donor_iati_transactions <- group_by(chad_iati_transactions, transaction_provider.org)
summary_by_donor_iati_transactions <- summarise(by_donor_iati_transactions, count_each_donor = n(),
total_by_donor = sum(transaction.value))
order_summary_donor_iati_transactions <- summary_by_donor_iati_transactions[order(-summary_by_donor_iati_transactions$total_by_donor),]
order_summary_donor_iati_transactions_count <- summary_by_donor_iati_transactions[order(-summary_by_donor_iati_transactions$count_each_donor),]
order_summary_donor_iati_transactions
UNPF_transactions <- subset(chad_iati_transactions, chad_iati_transactions$transaction_provider.org=='United Nations Population Fund')
Japan_transactions <- subset(chad_iati_transactions, chad_iati_transactions$transaction_provider.org=='Japan')
canada_transactions[canada_transactions==" "|canada_transactions==""]  <- NA
missing <- sapply(canada_transactions, function(x) sum(is.na(x)))
canada_var_missing <- read.csv("/users/bcarancibia/DG_BCA/canada_missing.csv", header = TRUE)
canada_missing <- ggplot(canada_var_missing, aes(canada_var_missing$Variable, canada_var_missing$Count.Missing )) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("Variable Names") +
ylab("Count of Missing Fields")+
labs(title <- "Number of Missing Data Points per Variable")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
canada_missing
knitr::kable(canada_var_missing)
shiny::runApp('s_homework/shinyapp')
shiny::runApp('s_homework/shinyapp')
shiny::runApp('s_homework/shinyapp')
head(order_summary_state)
average <- ggplot(order_summary_state, aes(x=order_summary_state$Provider.State, y=order_summary_state$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per State" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average
average_procedure <- ggplot(order_summary_drg, aes(x=order_summary_drg$DRG.Definition, y=order_summary_drg$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("Procedure") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges per Procedure" )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average_procedure
average_heart <- ggplot(order_summary_state_heart, aes(x=order_summary_state_heart$Provider.State, y=order_summary_state_heart$sum.average.charges)) +
geom_histogram(stat="identity",fill="#c0392b", alpha=0.75)+
fte_theme()+
xlab("State") +
ylab("Total Average Charges USD")+
labs(title <- "Total Average Charges Related to Heart Procedures per State " )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
average_heart
chad_amp <- read.csv("/users/bcarancibia/DG_BCA/IATI/Chad/data/chad_amp.csv", header = TRUE)
chad_iati <- read.csv("/users/bcarancibia/DG_BCA/IATI/Chad/data/chad_iati_activity.csv", header = TRUE)
chad_iati_transactions <- read.csv("/users/bcarancibia/DG_BCA/IATI/Chad/data/chad_transaction.csv", header = TRUE)
View(chad_amp)
by_sector<- group_by(chad_amp, Primary.Sector)
summary_by_sector <- summarise(by_sector, count_each_sector = n(),
total_by_sector = sum(Actual.Disbursements))
order_summary_sector <- summary_by_sector[order(-summary_by_donor$count_each_sector),]
require(dplyr)
by_sector<- group_by(chad_amp, Primary.Sector)
summary_by_sector <- summarise(by_sector, count_each_sector = n(),
total_by_sector = sum(Actual.Disbursements))
order_summary_sector <- summary_by_sector[order(-summary_by_donor$count_each_sector),]
by_sector<- group_by(chad_amp, Primary.Sector)
summary_by_sector <- summarise(by_sector, count_each_sector = n(),
total_by_sector = sum(Actual.Disbursements))
order_summary_sector <- summary_by_sector[order(-summary_by_sector$count_each_sector),]
View(by_sector)
by_sector<- group_by(chad_amp, Primary.Sector)
summary_by_sector <- summarise(by_sector, count_each_sector = n(),
total_by_sector = sum(Actual.Disbursements))
order_summary_sector <- summary_by_sector[order(-summary_by_sector$count_each_sector),]
View(order_summary_sector)
View(chad_iati)
by_sector_iati<- group_by(chad_iati, sector)
summary_by_sector_iati <- summarise(by_donor_iati, count_each_sector = n(),
total_by_sector = sum(total.Disbursement))
order_summary_sector_iati <- summary_by_sector_iati[order(-summary_by_sector_iati$count_each_sector),]
by_sector_iati<- group_by(chad_iati, sector)
summary_by_sector_iati <- summarise(by_sector_iati, count_each_sector = n(),
total_by_sector = sum(total.Disbursement))
order_summary_sector_iati <- summary_by_sector_iati[order(-summary_by_sector_iati$count_each_sector),]
View(order_summary_sector_iati)
View(chad_iati_transactions)
by_sector_iati_trans<- group_by(chad_iati_transactions, sector)
summary_by_sector_iati_trans <- summarise(by_sector_iati_trans, count_each_sector = n(),
total_by_sector = sum(total.Disbursement))
order_summary_sector_iati_trans <- summary_by_sector_iati_trans[order(-summary_by_sector_iati_trans$count_each_sector),]
summary_by_sector_iati_trans <- summarise(by_sector_iati_trans, count_each_sector = n(),
total_by_sector = sum(transaction.value))
order_summary_sector_iati_trans <- summary_by_sector_iati_trans[order(-summary_by_sector_iati_trans$count_each_sector),]
View(order_summary_sector_iati_trans)
write.table(order_summary_sector_iati_trans_chad, "/users/bcarancibia/DG_BCA/IATI/Chad", sep="\t")
by_sector<- group_by(chad_amp, Primary.Sector)
summary_by_sector <- summarise(by_sector, count_each_sector = n(),
total_by_sector = sum(Actual.Disbursements))
order_summary_sector_chad <- summary_by_sector[order(-summary_by_sector$count_each_sector),]
write.table(order_summary_sector_chad, "/users/bcarancibia/DG_BCA/Chad", sep="\t")
by_sector_iati<- group_by(chad_iati, sector)
summary_by_sector_iati <- summarise(by_sector_iati, count_each_sector = n(),
total_by_sector = sum(total.Disbursement))
order_summary_sector_iati_chad <- summary_by_sector_iati[order(-summary_by_sector_iati$count_each_sector),]
knitr::kable(order_summary_sector_iati)
write.table(order_summary_sector_iati_chad, "/users/bcarancibia/DG_BCA/IATI/Chad", sep="\t")
by_sector<- group_by(chad_amp, Primary.Sector)
summary_by_sector <- summarise(by_sector, count_each_sector = n(),
total_by_sector = sum(Actual.Disbursements))
order_summary_sector_chad <- summary_by_sector[order(-summary_by_sector$count_each_sector),]
write.table(order_summary_sector_chad, "/users/bcarancibia/DG_BCA/IATI/Chad/", sep="\t")
write.table(order_summary_sector_chad, "/users/bcarancibia/DG_BCA/IATI/", sep="\t")
write.table(order_summary_sector_chad, "users/bcarancibia/DG_BCA/IATI/", sep="\t")
mada_amp <- read.csv("/users/bcarancibia/DG_BCA/IATI/Madagascar/data/mada_amp.csv", header = TRUE)
mada_iati <- read.csv("/users/bcarancibia/DG_BCA/IATI/Madagascar/data/mada_activity.csv", header = TRUE)
mada_iati_transactions <- read.csv("/users/bcarancibia/DG_BCA/IATI/Madagascar/data/mada_transaction.csv", header = TRUE)
View(mada_amp)
audit_hn = read.csv("/users/bcarancibia/DG_BCA/AMP_Audit_Logger/audit_logger.csv", header = TRUE) #import honduras csv into R
audit_hn = read.csv("/users/bcarancibia/DG_BCA/AMP_Audit_Logger/Honduras/audit_logger.csv", header = TRUE) #import honduras csv into R
by_activity_honduras<- group_by(honduras_audit, Action)
summary_by_activity_honduras <- summarise(by_activity_honduras, count_each_activity = n())
require(dplyr)
honduras_aduit= read.csv("/users/bcarancibia/DG_BCA/AMP_Audit_Logger/Honduras/audit_logger.csv", header = TRUE) #import honduras csv into R
by_activity_honduras<- group_by(honduras_audit, Action)
summary_by_activity_honduras <- summarise(by_activity_honduras, count_each_activity = n())
percentage_honduras <- summarise(by_activity_honduras, percent_each_activity = n()/6021)
honduras_audit= read.csv("/users/bcarancibia/DG_BCA/AMP_Audit_Logger/Honduras/audit_logger.csv", header = TRUE) #import honduras csv into R
by_activity_honduras<- group_by(honduras_audit, Action)
summary_by_activity_honduras <- summarise(by_activity_honduras, count_each_activity = n())
percentage_honduras <- summarise(by_activity_honduras, percent_each_activity = n()/6021)
summary_by_activity_honduras
hn_pois <- data.frame(rpois(n=10000,lambda=mean(summary_by_activity_honduras$count_each_activity)))
hn_pois
names(hn.pois) <- c("honduras_data")
names(hn_pois) <- c("honduras_data")
hn.pois.plot <- ggplot(han_pois,aes(x=honduras_data)) +
geom_histogram(binwidth=1, aes(y = ..density..)) + geom_density(color="red")
require(ggplot2)
hn.pois.plot <- ggplot(han_pois,aes(x=honduras_data)) +
geom_histogram(binwidth=1, aes(y = ..density..)) + geom_density(color="red")
hn.pois.plot <- ggplot(hn_pois,aes(x=honduras_data)) +
geom_histogram(binwidth=1, aes(y = ..density..)) + geom_density(color="red")
hn.pois.plot
View(by_activity_honduras)
View(summary_by_activity_honduras)
hn.pois.plot <- ggplot(hn_pois,aes(x=honduras_data)) +
geom_histogram(binwidth=1, aes(y =action)) + geom_density(color="red")
hn.pois.plot
summary_by_activity_honduras
hn_pois <- data.frame(rpois(n=10000,lambda=mean(summary_by_activity_honduras$count_each_activity)))
names(hn_pois) <- c("honduras_data")
hn.pois.plot <- ggplot(hn_pois,aes(x=honduras_data)) +
geom_histogram(binwidth=1, aes(y = ..density..)) + geom_density(color="red")
hn.pois.plot
max(summary_by_activity_honduras$count_each_activity)
mean(summary_by_activity_honduras$count_each_activity)
View(summary_by_activity_honduras)
plot(audit_hn)
mada_amp <- read.csv("/users/bcarancibia/DG_BCA/IATI/Madagascar/data/mada_amp.csv", header = TRUE)
mada_iati <- read.csv("/users/bcarancibia/DG_BCA/IATI/Madagascar/data/mada_activity.csv", header = TRUE)
mada_iati_transactions <- read.csv("/users/bcarancibia/DG_BCA/IATI/Madagascar/data/mada_transaction.csv", header = TRUE)
plot(mada_amp)
plot(mada_iati)
require(data.table)
table <- read.csv("/users/bcarancibia/CUNY_IS_621/Week3/data/sample-training-data-naive-bayes.csv", headers = TRUE)
table <- read.csv("/users/bcarancibia/CUNY_IS_621/Week3/data/sample-training-data-naive-bayes.csv", headers=TRUE)
table <- read.csv("/users/bcarancibia/CUNY_IS_621/Week3/data/sample-training-data-naive-bayes.csv")
table
setwd()
setwd("/users/bcarancibia/CUNY_IS_661/data")
setwd("/users/bcarancibia/CUNY_IS_661/data")
chad <- read.csv("chad_amp.csv", headers=TRUE)
civ <- read.csv("civ_amp.csv", headers=TRUE)
haiti <- read.csv("haiti_amp.csv", headers=TRUE)
kosovo <- read.csv("kosovo_amp.csv", headers=TRUE)
madagascar <- read.csv("mada_amp.csv", headers=TRUE)
malawi <- read.csv("malawi.csv", headers=TRUE)
moldova <- read.csv("moldova.csv", headers=TRUE)
timor <- read.csv("timor.csv", headers=TRUE)
uganda <- read.csv("uganda.csv", headers=TRUE)
chad <- read.csv("chad_amp.csv")
View(chad)
setwd("/users/bcarancibia/CUNY_IS_661/data")
chad <- read.csv("chad_amp.csv")
civ <- read.csv("civ_amp.csv")
haiti <- read.csv("haiti_amp.csv")
kosovo <- read.csv("kosovo_amp.csv")
madagascar <- read.csv("mada_amp.csv")
malawi <- read.csv("malawi.csv")
moldova <- read.csv("moldova.csv")
timor <- read.csv("timor.csv")
uganda <- read.csv("uganda.csv")
uganda <- read.csv("uganda_amp.csv")
source('~/.active-rstudio-document', echo=TRUE)
summary(chad)
unique(chad)
length (chad)
source('~/CUNY_IS_661/scripts/exploratory_data_analysis.R', echo=TRUE)
setwd("/users/bcarancibia/CUNY_IS_661/data")
require(dplyr) #data manipulation
require(ggplot2) #plot the data
require(scales)
require(grid)
require(RColorBrewer)
fte_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[3]
color.axis.text = palette[6]
color.axis.title = palette[7]
color.title = palette[9]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.background, color=color.background)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color=color.background)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_blank()) +
theme(axis.ticks=element_blank()) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.background)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
chad <- read.csv("chad_amp.csv")
civ <- read.csv("civ_amp.csv")
haiti <- read.csv("haiti_amp.csv")
kosovo <- read.csv("kosovo_amp.csv")
madagascar <- read.csv("mada_amp.csv")
malawi <- read.csv("malawi.csv")
moldova <- read.csv("moldova.csv")
timor <- read.csv("timor.csv")
uganda <- read.csv("uganda_amp.csv")
length (chad)
lenghth(kosovo)
length(kosovo)
